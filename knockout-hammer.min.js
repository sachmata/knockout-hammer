/*
* Knockout Hammer
* knockout (https://github.com/knockout/knockout)
* hammer.js (https://github.com/hammerjs/hammer.js)
* Usage: data-bind="hmHold: holdHandlerFn, hmOptions: { recognizers: [ [Hammer.Press, {time:5000}] ] }"
*/
(function(){var events=['tap','doubletap','press','pan','swipe','pinch','rotate'];ko.utils.arrayForEach(events,function(eventName){var hmEventName='hm'+eventName.substring(0,1).toUpperCase()+eventName.substring(1).toLowerCase();var hammer,handler;ko.bindingHandlers[hmEventName]={init:function(element,valueAccessor,allBindings,viewModel,bindingContext){var options;if(!valueAccessor()){return false;}
hammer=Hammer(element,{});options=valueAccessor().hmOptions||{};handler=valueAccessor().bind(bindingContext.$data);hammer.on(eventName,function(event){handler(bindingContext.$data,event);});ko.utils.domNodeDisposal.addDisposeCallback(element,function(){if(typeof(hammer)!='undefined'&&hammer!=null){hammer.destroy();}
hammer=null;return true;});return true;},update:function(element,valueAccessor,allBindings,viewModel,bindingContext){var options;if(!valueAccessor()){return false;}
if(typeof(hammer)!='undefined'&&hammer!=null){hammer.off(eventName,handler);}
else{hammer=Hammer(element,{});}
options=valueAccessor().hmOptions||{};handler=valueAccessor().bind(bindingContext.$data);hammer.on(eventName,function(event){handler(bindingContext.$data,event);});}}});}).call(this);